pipeline {
    agent any

    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '10'))
        timeout(time: 12, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Requirements') {
            steps {
                dir("${env.WORKSPACE}/Ch05/05_02-publish-reports"){
                    sh 'python3 -m venv venv'
                    sh './venv/bin/pip3 install --upgrade --requirement requirements.txt'
                }
            }
        }
        stage('Lint') {
            steps {
                dir("${env.WORKSPACE}/Ch05/05_02-publish-reports"){
                    sh 'venv/bin/flake8 --ignore=E501,E231 *.py'
                    sh 'venv/bin/pylint --errors-only --disable=C0301 --disable=C0326 *.py'
                }
            }
        }
        stage('Test') {
            steps {
                dir("${env.WORKSPACE}/Ch05/05_02-publish-reports"){
                    sh('''
                        venv/bin/coverage run -m pytest -v test_*.py \
                            --junitxml=pytest_junit.xml
                    ''')
                }
            }
        }
        stage('Build') {
            steps {
                echo "Build the application in this step..."
            }
        }
        stage('Deploy') {
            steps {
                echo "Deploy the application in this step..."
            }
        }
    }

    post {
    always {
        dir("${env.WORKSPACE}/Ch05/05_02-publish-reports") {
            // Generate coverage XML
            sh 'venv/bin/coverage xml'

            // Publish test results (pytest)
            junit allowEmptyResults: true, testResults: 'pytest_junit.xml'

            // Publish pylint results (if generated)
            junit allowEmptyResults: true, testResults: 'pylint_junit.xml'

            // Code coverage (either use A or B below)
            
            // Option A: If you have the Coverage plugin installed
            publishCoverage adapters: [
                coberturaAdapter(pattern: 'coverage.xml')
            ], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')

            // Option B: If coberturaAdapter gives error (use this instead)
            // recordCoverage tools: [cobertura(pattern: 'coverage.xml')]
        }
    }
}

}
